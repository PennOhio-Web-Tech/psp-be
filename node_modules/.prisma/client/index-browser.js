
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.12.0
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.12.0",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.OrganizationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  initials: 'initials',
  email: 'email',
  password: 'password',
  organizationId: 'organizationId',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type'
});

exports.Prisma.OrganizationAccessScalarFieldEnum = makeEnum({
  organizationId: 'organizationId',
  userId: 'userId',
  read: 'read',
  write: 'write',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.EngagementScalarFieldEnum = makeEnum({
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  locationId: 'locationId',
  demographicId: 'demographicId',
  engagementDetailId: 'engagementDetailId',
  status: 'status',
  crossFunctionalTeamId: 'crossFunctionalTeamId',
  requestorId: 'requestorId',
  shortId: 'shortId',
  feedbackConfigId: 'feedbackConfigId',
  isDeleted: 'isDeleted',
  statusChangedOn: 'statusChangedOn'
});

exports.Prisma.LocationScalarFieldEnum = makeEnum({
  id: 'id',
  addressOne: 'addressOne',
  addressTwo: 'addressTwo',
  city: 'city',
  state: 'state',
  zip: 'zip'
});

exports.Prisma.EngagementDetailScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  summary: 'summary',
  description: 'description',
  associatedProgram: 'associatedProgram',
  armyImpact: 'armyImpact',
  fundingDetails: 'fundingDetails',
  otherInformation: 'otherInformation'
});

exports.Prisma.CrossFunctionalTeamsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DemographicScalarFieldEnum = makeEnum({
  id: 'id',
  soldierInput: 'soldierInput',
  soldiersNeeded: 'soldiersNeeded',
  mos: 'mos'
});

exports.Prisma.RequirementScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content'
});

exports.Prisma.RequestorInformationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  organization: 'organization',
  title: 'title',
  email: 'email',
  phone: 'phone'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  title: 'title',
  description: 'description',
  engagementId: 'engagementId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DueDateScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  dueDate: 'dueDate',
  engagementId: 'engagementId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FeedbackConfigScalarFieldEnum = makeEnum({
  id: 'id',
  feedbackType: 'feedbackType',
  isHumanResearch: 'isHumanResearch',
  hasSubmissions: 'hasSubmissions',
  freeFormQuestion: 'freeFormQuestion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TestFeedbackSubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  feedbackConfigId: 'feedbackConfigId',
  rating: 'rating',
  testFeedbackResponseId: 'testFeedbackResponseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TestFeedbackResponsesScalarFieldEnum = makeEnum({
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  customResponse: 'customResponse',
  results: 'results',
  anticipatedResults: 'anticipatedResults',
  conditionsConstraints: 'conditionsConstraints',
  metExpectations: 'metExpectations',
  notMetExpectations: 'notMetExpectations',
  otherOpportunities: 'otherOpportunities',
  additionalThoughts: 'additionalThoughts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InputFeedbackSubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  feedbackConfigId: 'feedbackConfigId',
  inputFeedbackResponseId: 'inputFeedbackResponseId',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InputFeedbackResponsesScalarFieldEnum = makeEnum({
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  customResponse: 'customResponse',
  opportunities: 'opportunities',
  processSolution: 'processSolution',
  notAsked: 'notAsked',
  responseViews: 'responseViews',
  additionalThoughts: 'additionalThoughts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FreeFeedbackSubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  feedbackConfigId: 'feedbackConfigId',
  freeFeedbackResponseId: 'freeFeedbackResponseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rating: 'rating'
});

exports.Prisma.FreeFeedbackResponsesScalarFieldEnum = makeEnum({
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  response: 'response',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FileScalarFieldEnum = makeEnum({
  id: 'id',
  engagementId: 'engagementId',
  engagementDraftId: 'engagementDraftId',
  blobName: 'blobName',
  containerName: 'containerName',
  path: 'path'
});

exports.Prisma.EngagementDraftScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  engagementTitle: 'engagementTitle',
  engagementSummary: 'engagementSummary',
  associatedProgram: 'associatedProgram',
  soldierInput: 'soldierInput',
  soldiersNeeded: 'soldiersNeeded',
  preferredDivision: 'preferredDivision',
  mos: 'mos',
  requirements: 'requirements',
  armyImpact: 'armyImpact',
  cft: 'cft',
  engagementRequest: 'engagementRequest',
  feedbackType: 'feedbackType',
  eventStartDate: 'eventStartDate',
  eventEndDate: 'eventEndDate',
  eventTitle: 'eventTitle',
  eventDescription: 'eventDescription',
  dueDate: 'dueDate',
  dueDateTitle: 'dueDateTitle',
  addressOne: 'addressOne',
  addressTwo: 'addressTwo',
  city: 'city',
  state: 'state',
  zip: 'zip',
  funding: 'funding',
  otherInfo: 'otherInfo',
  requestorName: 'requestorName',
  requestorEmail: 'requestorEmail',
  requestorPhone: 'requestorPhone',
  requestorTitle: 'requestorTitle',
  requestorOrganization: 'requestorOrganization',
  freeFormQuestion: 'freeFormQuestion'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.FeedbackTypes = makeEnum({
  testFeedbackSubmission: 'testFeedbackSubmission',
  freeFeedbackSubmission: 'freeFeedbackSubmission',
  inputFeedbackSubmission: 'inputFeedbackSubmission'
});

exports.Prisma.ModelName = makeEnum({
  Organization: 'Organization',
  User: 'User',
  Role: 'Role',
  OrganizationAccess: 'OrganizationAccess',
  Engagement: 'Engagement',
  Location: 'Location',
  EngagementDetail: 'EngagementDetail',
  CrossFunctionalTeams: 'CrossFunctionalTeams',
  Demographic: 'Demographic',
  Requirement: 'Requirement',
  RequestorInformation: 'RequestorInformation',
  Event: 'Event',
  DueDate: 'DueDate',
  FeedbackConfig: 'FeedbackConfig',
  TestFeedbackSubmission: 'TestFeedbackSubmission',
  TestFeedbackResponses: 'TestFeedbackResponses',
  InputFeedbackSubmission: 'InputFeedbackSubmission',
  InputFeedbackResponses: 'InputFeedbackResponses',
  FreeFeedbackSubmission: 'FreeFeedbackSubmission',
  FreeFeedbackResponses: 'FreeFeedbackResponses',
  File: 'File',
  EngagementDraft: 'EngagementDraft'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
