generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String               @id @default(uuid())
  name               String               @unique @db.VarChar(50)
  user               User[]
  engagement         Engagement[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizationAccess OrganizationAccess[]

  @@map("organizations")
}

model User {
  id                 String               @id @default(uuid())
  firstName          String               @db.VarChar(100)
  lastName           String               @db.VarChar(100)
  initials           String               @db.VarChar(2)
  email              String               @unique
  password           String
  organization       Organization?        @relation(fields: [organizationId], references: [id])
  organizationId     String?
  role               Role                 @relation(fields: [roleId], references: [id])
  roleId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  engagement         Engagement[]
  organizationAccess OrganizationAccess[]
  EngagementDraft    EngagementDraft[]

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  type  String @unique @db.VarChar(32)
  users User[]

  @@map("roles")
}

model OrganizationAccess {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  read           Boolean      @default(true)
  write          Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([userId, organizationId])
  @@map("organization_access")
}

model Engagement {
  id                    String               @id @default(uuid())
  organization          Organization         @relation(fields: [organizationId], references: [id])
  organizationId        String
  user                  User                 @relation(fields: [userId], references: [id])
  userId                String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  location              Location?            @relation(fields: [locationId], references: [id])
  locationId            String?              @unique
  demographic           Demographic          @relation(fields: [demographicId], references: [id], onDelete: Cascade)
  demographicId         String               @unique
  engagementDetail      EngagementDetail     @relation(fields: [engagementDetailId], references: [id], onDelete: Cascade)
  engagementDetailId    String               @unique
  status                String
  crossFunctionalTeam   CrossFunctionalTeams @relation(fields: [crossFunctionalTeamId], references: [id])
  crossFunctionalTeamId Int
  requestor             RequestorInformation @relation(fields: [requestorId], references: [id], onDelete: Cascade)
  requestorId           String               @unique
  events                Event[]
  dueDates              DueDate[]
  files                 File[]
  shortId               String?              @unique
  feedbackConfig        FeedbackConfig?      @relation(fields: [feedbackConfigId], references: [id])
  feedbackConfigId      String?              @unique
  isDeleted             Boolean              @default(false)
  statusChangedOn       DateTime?

  @@map("engagements")
}

model Location {
  id         String      @id @default(uuid())
  addressOne String
  addressTwo String?
  city       String
  state      String      @db.VarChar(2)
  zip        Int
  engagement Engagement?

  @@map("locations")
}

model EngagementDetail {
  id                String      @id @default(uuid())
  title             String
  summary           String
  description       String
  associatedProgram String
  armyImpact        String
  fundingDetails    String?
  otherInformation  String?
  engagement        Engagement?

  @@map("engagement_details")
}

model CrossFunctionalTeams {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  engagements Engagement[]

  @@map("cross_functional_teams")
}

model Demographic {
  id             String        @id @default(uuid())
  soldierInput   String
  soldiersNeeded Int
  mos            String
  engagement     Engagement?
  requirements   Requirement[]

  @@map("demographics")
}

model Requirement {
  id           String        @id @default(uuid())
  content      String        @unique
  demographics Demographic[]

  @@map("requirements")
}

model RequestorInformation {
  id           String      @id @default(uuid())
  name         String
  organization String
  title        String
  email        String
  phone        String
  engagement   Engagement?

  @@map("requestor_information")
}

model Event {
  id           String      @id @default(uuid())
  startDate    DateTime
  endDate      DateTime
  title        String
  description  String
  engagement   Engagement? @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  engagementId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("events")
}

model DueDate {
  id           String      @id @default(uuid())
  title        String
  dueDate      DateTime
  engagement   Engagement? @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  engagementId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("due_dates")
}

enum FeedbackTypes {
  testFeedbackSubmission
  freeFeedbackSubmission
  inputFeedbackSubmission
}

model FeedbackConfig {
  id                       String                    @id @default(uuid())
  feedbackType             FeedbackTypes
  isHumanResearch          Boolean
  hasSubmissions           Boolean
  engagement               Engagement?
  testFeedbackSubmissions  TestFeedbackSubmission[]
  inputFeedbackSubmissions InputFeedbackSubmission[]
  freeFeedbackSubmissions  FreeFeedbackSubmission[]
  freeFormQuestion         String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@map("feedback_configs")
}

model TestFeedbackSubmission {
  id                     String                @id @default(uuid())
  feedbackConfig         FeedbackConfig?       @relation(fields: [feedbackConfigId], references: [id], onDelete: Cascade)
  feedbackConfigId       String
  rating                 String
  testFeedbackResponses  TestFeedbackResponses @relation(fields: [testFeedbackResponseId], references: [id], onDelete: Cascade)
  testFeedbackResponseId String                @unique
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@map("test_feedback_submissions")
}

model TestFeedbackResponses {
  id                    String                  @id @default(uuid())
  testFeedback          TestFeedbackSubmission?
  startDate             DateTime
  endDate               DateTime?
  customResponse        String?
  results               String
  anticipatedResults    String
  conditionsConstraints String
  metExpectations       String
  notMetExpectations    String
  otherOpportunities    String
  additionalThoughts    String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model InputFeedbackSubmission {
  id                      String                 @id @default(uuid())
  feedbackConfig          FeedbackConfig?        @relation(fields: [feedbackConfigId], references: [id], onDelete: Cascade)
  feedbackConfigId        String
  inputFeedbackResponses  InputFeedbackResponses @relation(fields: [inputFeedbackResponseId], references: [id], onDelete: Cascade)
  inputFeedbackResponseId String                 @unique
  rating                  String
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@map("input_feedback_submissions")
}

model InputFeedbackResponses {
  id                 String                   @id @default(uuid())
  inputFeedback      InputFeedbackSubmission?
  startDate          DateTime
  endDate            DateTime?
  customResponse     String?
  opportunities      String
  processSolution    String
  notAsked           String
  responseViews      String
  additionalThoughts String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  @@map("input_feedback_responses")
}

model FreeFeedbackSubmission {
  id                     String                @id @default(uuid())
  feedbackConfig         FeedbackConfig?       @relation(fields: [feedbackConfigId], references: [id], onDelete: Cascade)
  feedbackConfigId       String
  freeFeedbackResponses  FreeFeedbackResponses @relation(fields: [freeFeedbackResponseId], references: [id], onDelete: Cascade)
  freeFeedbackResponseId String                @unique
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  rating                 String

  @@map("free_feedbacks_submissions")
}

model FreeFeedbackResponses {
  id           String                  @id @default(uuid())
  freeFeedback FreeFeedbackSubmission?
  startDate    DateTime
  endDate      DateTime?
  response     String
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

model File {
  id                String           @id @default(uuid())
  engagement        Engagement?      @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  engagementId      String?
  engagementDraft   EngagementDraft? @relation(fields: [engagementDraftId], references: [id], onDelete: Cascade)
  engagementDraftId String?
  blobName          String
  containerName     String
  path              String
}

model EngagementDraft {
  id                    String    @id @default(uuid())
  user                  User      @relation(fields: [userId], references: [id])
  userId                String
  engagementTitle       String?
  engagementSummary     String?
  associatedProgram     String?
  soldierInput          String?
  soldiersNeeded        String?
  preferredDivision     String?
  mos                   String?
  requirements          String[]
  armyImpact            String?
  cft                   Int?
  engagementRequest     String?
  feedbackType          String?
  files                 File[]
  eventStartDate        DateTime?
  eventEndDate          DateTime?
  eventTitle            String?
  eventDescription      String?
  dueDate               DateTime?
  dueDateTitle          String?
  addressOne            String?
  addressTwo            String?
  city                  String?
  state                 String?
  zip                   String?
  funding               String?
  otherInfo             String?
  requestorName         String?
  requestorEmail        String?
  requestorPhone        String?
  requestorTitle        String?
  requestorOrganization String?
  freeFormQuestion      String?
}
